<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Kids Sketch Pad</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <!-- Bootstrap CDN -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    #sketchPad {
      border: 2px solid #000;
    }
    #currentColorDisplay {
      margin-top: 10px;
      font-weight: bold;
    }
  </style>
</head>
<body class="p-4">
  <div class="container text-center">
    <h2>Kids Sketch Pad</h2>

    <!-- Canvas -->
    <canvas id="sketchPad" width="500" height="300"></canvas>

    <!-- Color Control Buttons -->
    <div class="my-3">
      <button id="redBtn" class="btn btn-danger">Red</button>
      <button id="blueBtn" class="btn btn-primary">Blue</button>
      <button id="greenBtn" class="btn btn-success">Green</button>
      <button id="eraserBtn" class="btn btn-secondary">Eraser</button>
    </div>

    <!-- Clear Button -->
    <div class="mb-3">
      <button id="clearBtn" class="btn btn-dark">Clear Canvas</button>
    </div>

    <!-- Current Color Display -->
    <div id="currentColorDisplay">Current Color: <span id="currentColor">Black</span></div>
  </div>

  <script src="script.js"></script>
</body>
</html>



    // write you Scripts here
// DOM Elements
const canvas = document.getElementById('sketchPad');
const ctx = canvas.getContext('2d');
const redBtn = document.getElementById('redBtn');
const blueBtn = document.getElementById('blueBtn');
const greenBtn = document.getElementById('greenBtn');
const eraserBtn = document.getElementById('eraserBtn');
const clearBtn = document.getElementById('clearBtn');
const currentColorDisplay = document.getElementById('currentColor');

// Initial Values
let isDrawing = false;
let currentColor = 'black';
ctx.strokeStyle = currentColor;
ctx.lineWidth = 2;
ctx.lineJoin = 'round';
ctx.lineCap = 'round';

// Helper to update color
function setColor(colorName, hexCode) {
  currentColor = hexCode;
  ctx.strokeStyle = currentColor;
  currentColorDisplay.textContent = colorName;
}

// Mouse Events
canvas.addEventListener('mousedown', (e) => {
  isDrawing = true;
  ctx.beginPath();
  ctx.moveTo(e.offsetX, e.offsetY);
});

canvas.addEventListener('mousemove', (e) => {
  if (isDrawing) {
    ctx.lineTo(e.offsetX, e.offsetY);
    ctx.stroke();
  }
});

canvas.addEventListener('mouseup', () => {
  isDrawing = false;
  ctx.closePath();
});

canvas.addEventListener('mouseout', () => {
  isDrawing = false;
});

// Color Change Events
redBtn.addEventListener('click', () => setColor('Red', '#ff0000'));
blueBtn.addEventListener('click', () => setColor('Blue', '#0000ff'));
greenBtn.addEventListener('click', () => setColor('Green', '#00ff00'));

// Eraser
eraserBtn.addEventListener('click', () => setColor('White', '#ffffff'));

// Clear Canvas
clearBtn.addEventListener('click', () => {
    ctx.fillStyle='#ffffff';
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  setColor('Black', '#000000');
});
